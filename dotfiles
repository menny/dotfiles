#!/bin/bash
set -e

repo_folder="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
TMPDIR="$(mktemp -d)"
HOME="$(eval echo ~$USER)"

#must run from the HOME folder
pushd "$HOME" > /dev/null
trap "popd > /dev/null" EXIT

function source_script() {
    local title="$1"
    local script="$2"
    if [[ -f "$script" ]]; then
        echo -n "$title"
        source "$script" "$repo_folder" "$HOME" "$TMPDIR"
    fi
}

function remove_dotfile() {
    local name=${1}
    local password=${2}
    if [[ -z "${name}" ]] ; then
        echo "ERROR:"
        echo "ERROR: missing arguments. dotfiles.sh remove [backup-name]"
        exit 1
    fi

    echo -n "" > ${TMPDIR}/remove_dotfiles.lst
    while read -r line
    do
        local regex="(.+):${name}:(.+)"

        if [[ ${line} =~ ${regex} ]]; then
            local encrypted=${BASH_REMATCH[1]}
            local actual_file=${BASH_REMATCH[2]}
            #restoring link
            rm ${actual_file}
            if [[ "${encrypted}" == "encrypted" ]]; then
                decrypt_file ${repo_folder}/${name} ${actual_file} ${password}
                rm ${repo_folder}/decrypted_dotfiles/decrypted_${name}
                rm ${repo_folder}/${name}
            else
                mv ${repo_folder}/${name} ${actual_file}
            fi
        else
            echo "${line}" >> ${TMPDIR}/remove_dotfiles.lst
        fi
    done < ${repo_folder}/dotfiles.lst
    mv ${TMPDIR}/remove_dotfiles.lst ${repo_folder}/dotfiles.lst
}

function add_dotfile() {
    local name=$1
    local dotfile=$(eval echo $2)
    local encrypted=${3:-plain}
    local password=${4}
    if [[ -z "${dotfile}" ]] || [[ -z "${name}" ]] ; then
        echo "X"
        echo "ERROR: missing arguments. dotfiles.sh add/add-enc [full/path/to/.dotfile] [backup-name]"
        exit 1
    fi
    if [[ "${dotfile:0:1}" != "/" ]]; then
        echo "X"
        echo "ERROR: Please, use absolute paths."
        exit 1
    fi
    
    source_script " [pre-add-hook] " "$repo_folder/pre-add-hook.sh"
    if [[ -f "${dotfile}" ]]; then
        #this will allow / in the name
        mkdir -p $(dirname ${repo_folder}/${name}) || true

        remove_dotfile ${name} ${password}
        echo "${encrypted}:${name}:${dotfile}" >> ${repo_folder}/dotfiles.lst
        uniq=($(cat ${repo_folder}/dotfiles.lst | sort -u))
        printf "%s\n" "${uniq[@]}" > ${repo_folder}/dotfiles.lst

        if [[ "${encrypted}" == "encrypted" ]]; then
            local decrypted_file=${repo_folder}/decrypted_dotfiles/decrypted_${name}
            mkdir -p $(dirname ${decrypted_file}) || true
            mv ${dotfile} ${decrypted_file}
            ln -s ${decrypted_file} ${dotfile}
            encrypt_file ${decrypted_file} ${repo_folder}/${name} ${password}
        else
            mv ${dotfile} ${repo_folder}/${name}
            ln -s ${repo_folder}/${name} ${dotfile}
        fi
    else
        echo "dotfile '${dotfile}' does not exist!"
        exit 1
    fi
    source_script " [post-add-hook] " "$repo_folder/post-add-hook.sh"
}

function add_bin() {
    local required_bin=$1
    command -v ${required_bin} >/dev/null 2>&1 || { echo >&2 "required '${required_bin}' is not installed.  Aborting."; exit 1; }
    echo "${required_bin}" >> ${repo_folder}/required_bins.lst
    uniq=($(cat ${repo_folder}/required_bins.lst | sort -u))
    printf "%s\n" "${uniq[@]}" > ${repo_folder}/required_bins.lst
}

function remove_bin() {
    local name=$1
    if [[ -z "${name}" ]] ; then
        echo "ERROR:"
        echo "ERROR: missing arguments. dotfiles.sh remove-bin [required-bin-filename]"
        exit 1
    fi

    while read -r line
    do
        [[ ${line} != ${name} ]] && echo "${line}"
    done < required_bins.lst > ${TMPDIR}/remove_bin
    mv ${TMPDIR}/remove_bin ${repo_folder}/required_bins.lst
}

function verify_bins() {
    while IFS= read -r required_bin
    do
        echo -n "Checking ${required_bin} available.. "
        command -v ${required_bin} >/dev/null 2>&1 || { echo >&2 "required '${required_bin}' is not installed.  Aborting."; exit 1; }
        echo "‚úì"
    done < ${repo_folder}/required_bins.lst
}

function encrypt_file() {
    local file_to_encrypt="$1"
    local encrypted_file="$2"
    local password="$3"
    openssl enc -a -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in ${file_to_encrypt} -out ${encrypted_file} -k ${password}
    echo -n "üîê "
}

function decrypt_file() {
    local encrypted_file="$1"
    local decrypted_file="$2"
    local password="$3"
    openssl enc -a -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -d -in ${encrypted_file} -out ${decrypted_file} -k ${password}
    echo -n "üîì "
}

function restore_links() {
    local regex="(.+):(.+):(.+)"
    local backup_folder="${HOME}/dotfiles_backup"
    local password=${1}

    while IFS= read -r dotfile_line
    do
        if [[ ${dotfile_line} =~ ${regex} ]]; then
            local encrypted=${BASH_REMATCH[1]}
            local repo_namefile=${BASH_REMATCH[2]}
            local actual_file=${BASH_REMATCH[3]}
            local post_msg=""
            echo -n "Restoring '${actual_file}'... "
            if [[ -f ${actual_file} ]]; then
                if [[ ! -L ${actual_file} ]]; then
                    #we can just unlink
                    rm ${actual_file}
                else
                    local dotfile_backup=${backup_folder}${actual_file}
                    mkdir -p $(dirname ${dotfile_backup}) || true
                    mv ${actual_file} ${dotfile_backup}
                    echo -n "üíº "
                    post_msg=" previous file was backed-up to ${dotfile_backup}."
                fi
            fi
            #restoring link
            mkdir -p $(dirname ${actual_file}) || true
            if [[ "${encrypted}" == "encrypted" ]]; then
                local decrypted_file=${repo_folder}/decrypted_dotfiles/decrypted_${repo_namefile}
                mkdir -p $(dirname ${decrypted_file}) || true
                decrypt_file ${repo_folder}/${repo_namefile} ${decrypted_file} ${password}
                ln -s ${decrypted_file} ${actual_file}
            else
                ln -s ${repo_folder}/${repo_namefile} ${actual_file}
            fi
            echo "‚úì ${post_msg}"
        elif [[ ! -z ${dotfile_line} ]]; then
            echo "input line '${dotfile_line}' has illegal format!"
            exit 1
        fi
    done < ${repo_folder}/dotfiles.lst
}

function reenc() {
    local regex="(.+):(.+):(.+)"
    local old_password="$1"
    local new_password="$2"

    while IFS= read -r dotfile_line
    do
        if [[ ${dotfile_line} =~ ${regex} ]]; then
            local encrypted=${BASH_REMATCH[1]}
            local repo_namefile=${BASH_REMATCH[2]}
            if [[ "${encrypted}" == "encrypted" ]]; then
                echo -n "Re-encrypting ${repo_namefile}..."
                local decrypted_file=${repo_folder}/decrypted_dotfiles/decrypted_${repo_namefile}
                mkdir -p $(dirname ${decrypted_file}) || true
                decrypt_file ${repo_folder}/${repo_namefile} ${decrypted_file} ${old_password}
                encrypt_file ${decrypted_file} ${repo_folder}/${repo_namefile} ${new_password}
                echo "‚úì"
            fi
        elif [[ ! -z ${dotfile_line} ]]; then
            echo "input line '${dotfile_line}' has illegal format!"
            exit 1
        fi
    done < ${repo_folder}/dotfiles.lst
}

case $1 in
    restore)
        password=""
        if [[ ! -z $(grep "encrypted:" ${repo_folder}/dotfiles.lst) ]]; then
            read -s -p "Enter password for decryption: " password
            if [[ -z "${password}" ]]; then
                echo " EMPTY! "
                exit 1
            else
                echo "üîì "
            fi
        fi
        source_script " [pre-restore-hook] " "$repo_folder/pre-restore-hook.sh"
        echo "Restoring:"
        verify_bins
        restore_links ${password}
        source_script " [post-restore-hook] " "$repo_folder/post-restore-hook.sh"
        echo "Done."
        ;;
    commit)
        echo "Committing:"
        pushd ${repo_folder} > /dev/null
        git status
        read -p "Can I commit locally (y)es, (n)o, (d)iff? " continue_response
        echo ""
        if [[ "${continue_response}" == "d" ]]; then
            git diff
        elif [[ "${continue_response}" == "y" ]]; then
            git add .
            commit_date=$(date '+%Y-%m-%d %H:%M:%S')
            git commit -m "dotfiles backup ${commit_date}"

            read -p "Can I push to remote? (y)es, (n)o " continue_response
            echo ""
            if [[ "${continue_response}" == "y" ]]; then
                git push origin main
            fi
        fi
        popd > /dev/null
        ;;
    diff)
        pushd ${repo_folder} > /dev/null
        git diff
        popd > /dev/null
        ;;
    add)
        echo -n "Adding dotfile $2 from $3: "
        add_dotfile $2 $3
        echo "‚úì"
        ;;
    add-enc)
        password=""
        read -s -p "Enter password for encryption: " password
        if [[ -z "${password}" ]]; then
                echo " EMPTY! "
                exit 1
            else
                echo "üîê "
            fi
        echo -n "Adding dotfile $2 from $3 and encrypting: "
        add_dotfile $2 $3 encrypted ${password}
        echo "‚úì"
        ;;
    remove)
        password=""
        if [[ ! -z $(grep "encrypted:$2:" ${repo_folder}/dotfiles.lst) ]]; then
            read -s -p "Enter password for decryption: " password
            if [[ -z "${password}" ]]; then
                echo " EMPTY! "
                exit 1
            else
                echo "üîì "
            fi
        fi

        echo -n "Removing dotfile $2: "
        remove_dotfile $2 ${password}
        echo "‚úì"
        ;;
    add-bin)
        echo -n "Adding bin $2: "
        add_bin $2
        echo "‚úì"
        ;;
    remove-bin)
        echo -n "Removing bin $2: "
        remove_bin $2
        echo "‚úì"
        ;;
    list)
        echo "* Required bins:"
        cat ${repo_folder}/required_bins.lst
        echo ""
        echo "* Managed dotfiles:"
        cat ${repo_folder}/dotfiles.lst
        ;;
    reenc)
        read -s -p "Enter password for decryption (old password): " old_password
        if [[ -z "${old_password}" ]]; then
            echo " EMPTY! "
            exit 1
        fi
        echo

        read -s -p "Enter password for encryption (new password): " new_password
        if [[ -z "${new_password}" ]]; then
            echo " EMPTY! "
            exit 1
        fi
        echo
        read -s -p "Again, enter password for encryption (new password): " again_new_password
        if [[ -z "${again_new_password}" ]]; then
            echo " EMPTY! "
            exit 1
        fi
        if [[ "$again_new_password" != "$new_password" ]]; then
            echo "PASSWORDS DO NOT MATCH!"
        fi
        echo

        reenc "$old_password" "$new_password"

        echo "üîê"
        ;;
    noop)
        #no-op. mostly here so the dirty check could be called.
        ;;
    *)
        echo "Supported commands:"
        echo "restore - links the dotfiles in this repo to the correct locations. This is usually happens once, when you restoring to a new machine."
        echo "diff - git diff your dotfiles."
        echo "commit - commits and pushes local changes to repo."
        echo "add [backup-name] [full/path/to/.dotfile] - adds a dotfile to this repo with the given name."
        echo "add-enc [backup-name] [full/path/to/.dotfile] - adds a dotfile to this repo with the given name, and encrypts it."
        echo "reenc - changes the password of all encypted files."
        echo "remove [backup-name] - removes a dotfile from the list of backuped dotfiles."
        echo "add-bin [binary-name] - adds a required bin."
        echo "remove-bin [binary-name] - removes a required bin."
        echo "list - prints out a list of all backup dotfiles and required bins."
    ;;
esac

if [[ $(git --git-dir=${repo_folder}/.git --work-tree=${repo_folder} diff --stat) != '' ]]; then
  echo "** [DOTFILES] your dotfiles repo is marked as dirty. You may want to push the recent changes to your remote repo by calling 'dotfiles commit'."
fi
